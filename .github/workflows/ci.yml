name: Continuous Integration

on:
  push:
    branches:
      - master

  pull_request:
    branches:
      - master

env:
  VCPKG_COMMIT: "962e5e39f8a25f42522f51fffc574e05a3efd26b"

jobs:
  lint:
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with: { python-version: "3.8" }

      - name: Lint
        run: cmake -D FORMAT_COMMAND=clang-format-14 -P cmake/lint.cmake

  sanitize:
    needs: [lint]

    runs-on: ubuntu-22.04

    env: { CXX: clang++-14 }

    steps:
      - uses: actions/checkout@v3

      - name: Install vcpkg
        uses: friendlyanon/setup-vcpkg@v1
        with: { committish: "${{ env.VCPKG_COMMIT }}" }

      - name: Configure
        run: cmake --preset=ci-sanitize

      - name: Build
        run: cmake --build build/sanitize -j 2

      - name: Test
        working-directory: build/sanitize
        env:
          ASAN_OPTIONS: "strict_string_checks=1:\
            detect_stack_use_after_return=1:\
            check_initialization_order=1:\
            strict_init_order=1:\
            detect_leaks=1"
          UBSAN_OPTIONS: print_stacktrace=1
        run: ctest --output-on-failure --no-tests=error -j 2

  test:
    needs: [lint]

    strategy:
      matrix:
        os: [macos-12, ubuntu-22.04, windows-2022]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3

      - name: Install static analyzers
        if: matrix.os == 'ubuntu-22.04'
        run: >-
          sudo apt-get install clang-tidy-14 cppcheck -y -q

          sudo update-alternatives --install
          /usr/bin/clang-tidy clang-tidy
          /usr/bin/clang-tidy-14 140

      - name: Install vcpkg
        uses: friendlyanon/setup-vcpkg@v1
        with: { committish: "${{ env.VCPKG_COMMIT }}" }

      - name: Setup MultiToolTask
        if: matrix.os == 'windows-2022'
        run: |
          Add-Content "$env:GITHUB_ENV" 'UseMultiToolTask=true'
          Add-Content "$env:GITHUB_ENV" 'EnforceProcessCountAcrossBuilds=true'

      - name: Configure
        shell: pwsh
        run: cmake "--preset=ci-$("${{ matrix.os }}".split("-")[0])"

      - name: Build
        run: cmake --build build --config Release -j 2

      - name: Install
        run: cmake --install build --config Release --prefix prefix

      - name: Test
        working-directory: build
        run: ctest --output-on-failure --no-tests=error -C Release -j 2
